name: Build chip-tool

on:
  push:
    branches: [ main ]
    paths:
      - .github/workflows/build.yml
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        arch: [x64, arm64]
        exclude:
          - os: macos-latest
            arch: x64  # macos-latest runner is x64 only
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set CHIP ref
        run: echo "CHIP_REF=v1.4.2.0" >> $GITHUB_ENV

      - name: Checkout connectedhomeip 
        uses: actions/checkout@v4
        with:
          repository: project-chip/connectedhomeip
          ref: refs/tags/${{ env.CHIP_REF }}
          path: connectedhomeip

      - name: Install dependencies
        run: |
          brew install python ninja llvm

      # For Linux arm64, set up QEMU for cross-compilation
      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      # Build step (adapt for your build system)
      - name: Build chip-tool
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            # Use cross-compiler or Docker for arm64
            echo "Cross-compiling for linux-arm64"
            # Example: use a Docker image or set CC/CXX to aarch64-linux-gnu-gcc
          else
            echo "Building for ${{ matrix.os }} ${{ matrix.arch }}"
            # Normal build commands
          fi

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: chip-tool-${{ matrix.os }}-${{ matrix.arch }}
          path: path/to/binary

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.CHIP_REF }}
          release_name: Release ${{ env.CHIP_REF }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: connectedhomeip/out/chip-tool/chip-tool
          asset_name: chip-tool
          asset_content_type: application/octet-stream
